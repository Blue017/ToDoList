/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ui;

import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoClient;
import org.bson.types.ObjectId;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoCursor;
import com.mongodb.client.MongoDatabase;
import org.bson.Document;
import org.bson.types.ObjectId;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Projections;
import static database.MongoDBConnection.connect;
import static database.MongoDBConnection.getDatabase;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import model.Task;
import model.TaskListTableModel;
import model.TaskTableModel;
import org.bson.conversions.Bson;
import security.TaskDAO;


/**
 *
 * @author GHOST
 */
public class TaskUI extends javax.swing.JFrame {
    private String nameList;
    private List<ObjectId> taskIds = new ArrayList<>();
    private Timer timer;


    /**
     * Creates new form Tareas
     */
    public TaskUI(String listName, String description) {
            this.nameList = listName;
            initComponents();
            loadTasks(listName);
            initializeTimer(); 
    }
    private void loadTasks(String listName) {
        // Conecta a la base de datos y obtén la colección "Task"
        MongoClient mongoClient = connect();
        MongoDatabase database = getDatabase();
        MongoCollection<Document> collection = database.getCollection("Task");

        // Define las columnas que deseas mostrar en la tabla
        String[] columnNames = {"NAME", "START DATE", "END DATE", "DESCRIPTION", "STATUS"};

        // Crea un modelo de tabla personalizado
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        // Crea un filtro para buscar tasks asociados a listName
        Bson filter = Filters.eq("listName", listName);

        // Consulta los documentos que cumplan con el filtro
        FindIterable<Document> documents = collection.find(filter);

        for (Document document : documents) {
            ObjectId id = document.getObjectId("_id");
            taskIds.add(id);
            String name = document.getString("name");
            String startDate = document.getString("startDate");
            String endDate = document.getString("endDate");
            String description = document.getString("description");
            String status = document.getString("status");

            // Agrega una fila con los valores a la tabla
            model.addRow(new Object[]{name, startDate, endDate, description, status});
        }

        // Asigna el modelo de tabla a la tabla jTableTasks
        jTableTasks.setModel(model);

        // Cierra la conexión a MongoDB
        mongoClient.close();
  }
        private void initializeTimer() {
            int delay = 60000;  // Intervalo en milisegundos (ejemplo: 60 segundos)
            ActionListener taskPerformer = new ActionListener() {
                public void actionPerformed(ActionEvent evt) {
                    // Llama a loadTasks para cargar nuevamente los datos
                    loadTasks(nameList);
                }
            };
            timer = new Timer(delay, taskPerformer);
            timer.setRepeats(true);  // El temporizador se repetirá
            timer.start();  // Inicia el temporizador
        }
    private ObjectId getIdForSelectedRow(int selectedRow) {
        return taskIds.get(selectedRow);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableTasks = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabelNombreLista = new javax.swing.JLabel();
        jButtonBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 0, 0));

        jTableTasks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "NAME", "START DATE", "END DATE", "DESCRIPTION", "STATUS"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTableTasks.setColumnSelectionAllowed(true);
        jTableTasks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableTasksMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableTasks);
        jTableTasks.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jButton2.setFont(new java.awt.Font("Courier New", 3, 18)); // NOI18N
        jButton2.setText("NEW TASK");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabelNombreLista.setFont(new java.awt.Font("Courier New", 3, 36)); // NOI18N
        jLabelNombreLista.setForeground(new java.awt.Color(255, 255, 255));
        jLabelNombreLista.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelNombreLista.setText("TASK");

        jButtonBack.setFont(new java.awt.Font("Courier New", 3, 24)); // NOI18N
        jButtonBack.setText("Back");
        jButtonBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(48, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 949, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(183, 183, 183)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(227, 227, 227))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(305, 305, 305)
                .addComponent(jLabelNombreLista, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jLabelNombreLista, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonBack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("EDIT TASKS", jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    TaskEditUI taskEditUI = new TaskEditUI(nameList);
    taskEditUI.setSize(600, 640); // Ajusta el tamaño según tus necesidades
    
    taskEditUI.setLocationRelativeTo(null);
    
    taskEditUI.setResizable(false);
    
    taskEditUI.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTableTasksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableTasksMouseClicked
    // Obtén la fila seleccionada
    int selectedRow = jTableTasks.getSelectedRow();

    // Asegúrate de que se haya seleccionado una fila
    if (selectedRow >= 0) {
        // Obtén los valores de la fila seleccionada
        String name = jTableTasks.getValueAt(selectedRow, 0).toString();
        String startDate = jTableTasks.getValueAt(selectedRow, 1).toString();
        String endDate = jTableTasks.getValueAt(selectedRow, 2).toString();
        String description = jTableTasks.getValueAt(selectedRow, 3).toString();
        String status = jTableTasks.getValueAt(selectedRow, 4).toString();

        // Obtén la ID del documento asociado a la fila seleccionada
        ObjectId id = getIdForSelectedRow(selectedRow);

        // Crea una nueva instancia de la ventana de detalles y pásale los valores
        TaskUpdateUI taskDetailsUI = new TaskUpdateUI(name, startDate, endDate, description, status, id);
        // Configura la ventana para que no sea redimensionable
        taskDetailsUI.setResizable(false);

        // Centra la ventana en el medio de la pantalla
        taskDetailsUI.setLocationRelativeTo(null);
        // Haz que la nueva ventana sea visible
        taskDetailsUI.setVisible(true);
    }
    }//GEN-LAST:event_jTableTasksMouseClicked

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBackActionPerformed
    nameList = "";
    this.dispose();
    }//GEN-LAST:event_jButtonBackActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6 is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
        java.util.logging.Logger.getLogger(TaskUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>
    //</editor-fold>

    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            // Crea una instancia de TaskUI con valores ficticios (por ejemplo, cadenas vacías)
            TaskUI taskUI = new TaskUI("", "");
            taskUI.setVisible(true);
        }
    });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButtonBack;
    private javax.swing.JLabel jLabelNombreLista;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableTasks;
    // End of variables declaration//GEN-END:variables
}
